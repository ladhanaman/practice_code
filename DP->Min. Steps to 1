//brute-force approach
int countMinStepsToOne(int n)
{
	if(n == 1)
    {
        return 0;
    }
    
    int a = countMinStepsToOne(n - 1);
    int b = INT_MAX;
    if(n % 2 == 0)
    {
        b = countMinStepsToOne(n / 2); 
    }
    int c = INT_MAX;
    if(n % 3 == 0)
    {
        c = countMinStepsToOne(n / 3); 
    }
    
    return min(a, min(b, c)) + 1;
}

//memoization approach
int helper(int arr[], int n)
{
    if(n == 1)
    {
        return 0;
    }
    
    if(arr[n] != -1)
    {
        return arr[n];
    }
    
    int a = helper(arr, n - 1);
    int b = INT_MAX;
    if(n % 2 == 0)
    {
        b = helper(arr, n / 2); 
    }
    int c = INT_MAX;
    if(n % 3 == 0)
    {
        c = helper(arr, n / 3); 
    }
    
    arr[n] = min(a, min(b, c)) + 1;
    return arr[n];
}

int countMinStepsToOne(int n)
{
    int *arr = new int[n + 1];
    
    for(int i = 0; i <= n; i++)
    {
        arr[i] = -1;
    }
    
    return helper(arr, n);
}

//Dynamic Programming approach
int countStepsToOne(int n)
{
	int *arr = new int[n + 1];
    
    arr[1] = 0;
    arr[2] = 1;
    arr[3] = 1;
    
    for(int i = 4; i <= n; i++)
    {
    	int a = n, b = n;
        if(i % 2 == 0)
        {
            a = arr[i / 2];
        }
        if(i % 3 == 0)
        {
            b = arr[i / 3];
        }
        arr[i] = min(arr[i - 1], min(a, b)) + 1;
    }
    
    return arr[n];
}
