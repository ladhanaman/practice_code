Given an integer N, find and return the count of minimum numbers required to represent N as a sum of squares.
That is, if N is 4, then we can represent it as : {1^2 + 1^2 + 1^2 + 1^2} and {2^2}. The output will be 1, 
as 1 is the minimum count of numbers required to represent N as sum of squares.

// //bruce force
// int minCount(int n)
// {
// 	if(n == 0)
//     {
//         return 0;
//     }
    
//     int ans = INT_MAX;
//     for(int i = 1; i * i <= n; i++)
//     {
//         ans = min(ans, minCount(n - (i*i)));
//     }
//     return ans + 1;
// }

// // Memoization
// int helper(int arr[], int n)
// {
//     if(n == 0)
//     {
//         return 0;
//     }
    
//     if(arr[n] != -1)
//     {
//         return arr[n];
//     }
//     int ans = INT_MAX;
//     for(int i = 1; i * i <= n; i++)
//     {
//         ans = min(ans, helper(arr, n - (i * i)));
//     }
//     arr[n] = ans + 1;
//     return arr[n];
// }

// int minCount(int n)
// {
//     int *arr = new int[n + 1];
    
//     for(int i = 0; i <= n; i ++)
//     {
//         arr[i] = -1;
//     }
    
//     return helper(arr, n);
// }

// Dynamic Programming
 int minCount(int n)
 {
     if(n <= 2)
     {
 		return n;
     }
    
     int *dp = new int[n + 1];
    
     dp[0] = 0;
     dp[1] = 1;
     dp[2] = 2;
    
     for(int i = 3; i <= n; i++)
     {
         int minimum = i;
         for(int j = 1; j * j <= n; j++)
         {
             minimum = min(minimum, dp[i - (j * j)]);
         }
         dp[i] = minimum + 1;
     }
     int result = dp[n];
     delete[] dp;
     return result;
 }
