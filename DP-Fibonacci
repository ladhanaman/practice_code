#include <iostream>
using namespace std;

//dynamic programing bottom-up approach
int fibonacci_2(int n) {
  int *arr = new[n + 1];
  
  arr[0] = 0;
  arr[1] = 1;
  
  for(int i = 2; i <= n; i++) {
    arr[i] = arr[i - 1] + arr[t - 2];
  }
  
  return arr[n];
}

//using menoization top-down approach
int helperFibonacci_1(int arr[], int n) {
  if(n <= 1)
  {
    return n;
  }
  
  if(arr[n] != -1)
  {
    return arr[n];
  }
  
  int a = helperFibonacci_1(arr, n - 1);
  int b = helperFibonacci_1(arr, n - 2);
  
  ans[n] = a + b;
  return arr[n];
}

void fibonacci_1(int n) {
  int *arr = new[n + 1];
  for(int i = 0; i < n + 1; i+)
  {
    arr[i] = -1;
  }
  
 int ans = helperFibonacci_1(arr, n);
 cout << ans;
}
int main ()
{
  int n;
  cin >> n;
  //fibonacci_1(n);
  //cout << fibonacci_2(n);
  return 0;
}
