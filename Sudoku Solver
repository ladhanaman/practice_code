#include<bits/stdc++.h>
using namespace std;

#define N 9

bool findEmptyLocation(int grid[N][N], int &row, int &col)
{
    for(int i = 0; i < N; i++)
    {
        for(int j = 0; j < N; j++)
        {
            if(grid[i][j] == 0)
            {
                row = i;
                col = j;
                return true;
            }
        }
    }
    return false;
}
    
bool isPossible(int grid[N][N], int row, int col, int num)
{
	//safe in row
    for(int i = 0; i < N; i++)
    {
        if(grid[row][i] == num)
        {
            return false;
        }
    }
    
    //safe in col
    for(int i = 0; i < N; i++)
    {
		if(grid[i][col] == num)
        {
			return false;
        }
    }
    
    //safe in block
    int rowFactor = row - (row % 3);    
    int colFactor = col - (col % 3);    
    
    for(int i = 0; i < 3; i++)
    {
        for(int j = 0; j < 3; j++)
        {
            if(grid[rowFactor + i][colFactor + j] == num)
            {
                return false;
            }
        }
    }
    
    return true;
}

bool solveSudoku(int grid[N][N])
{
    int row, col;
    
    if(!findEmptyLocation(grid, row, col))
    {
        return true;
    }
    
    for(int i = 1; i <= 9;  i++)
    {
        if(isPossible(grid, row, col, i))
        {
            grid[row][col] = i;
            
            if(solveSudoku(grid))
            {
                return true;
            }
            grid[row][col] = 0;
        }
    }
    return false;
    
}
    
int main(){
    
    int grid[N][N];
    for(int i = 0; i < N; i++)
    {
        for(int j = 0; j < N; j++)
        {
            cin >> grid[i][j];
        }
    }
    
    if(solveSudoku(grid))
    {
        cout << "true" << endl;
    }
    else
    {
        cout << "false" << endl;
    }
    return 0;
}
